device-> MiioDevice {
  model=zhimi.airpurifier.m1,
  types=miio:air-purifier, sensor, miio, air-purifier,
  capabilities=miio:buzzer, miio:led-brightness, miio:switchable-led, pm2.5, relative-humidity, temperature, switchable-mode, mode, switchable-power, restorable-state, power, state
}
Metadata {
  types: Set { 'miio:air-purifier', 'sensor', 'miio', 'air-purifier' },
  capabilities: 
   Set {
     'miio:buzzer',
     'miio:led-brightness',
     'miio:switchable-led',
     'pm2.5',
     'relative-humidity',
     'temperature',
     'switchable-mode',
     'mode',
     'switchable-power',
     'restorable-state',
     'power',
     'state' },
  actions: 
   { buzzer: 
      { name: 'buzzer',
        arguments: [Object],
        returnType: [Object],
        description: 'Get or set if the buzzer is active',
        tags: [Object] },
     setBuzzer: 
      { name: 'setBuzzer',
        arguments: [Object],
        returnType: [Object],
        description: 'Set if the buzzer is active',
        tags: [Object] },
     getBuzzer: 
      { name: 'getBuzzer',
        arguments: [],
        returnType: [Object],
        description: 'Get if the buzzer is active',
        tags: [Object] },
     ledBrightness: 
      { name: 'ledBrightness',
        arguments: [Object],
        returnType: [Object],
        description: 'Get or set the LED brightness',
        tags: [Object] },
     led: 
      { name: 'led',
        arguments: [Object],
        returnType: [Object],
        description: 'Get or set if the LED should be used',
        tags: [Object] },
     pm2_5: 
      { name: 'pm2_5',
        arguments: [],
        returnType: [Object],
        description: 'Get the current PM2.5 density',
        getterForState: 'pm2.5',
        tags: [] },
     'pm2.5': 
      { name: 'pm2.5',
        arguments: [],
        returnType: [Object],
        description: 'Get the current PM2.5 density',
        getterForState: 'pm2.5',
        tags: [] },
     relativeHumidity: 
      { name: 'relativeHumidity',
        arguments: [],
        returnType: [Object],
        description: 'Get the current relative humidity',
        getterForState: 'relativeHumidity',
        tags: [] },
     rh: 
      { name: 'rh',
        arguments: [],
        returnType: [Object],
        description: 'Get the current relative humidity',
        getterForState: 'relativeHumidity',
        tags: [] },
     temperature: 
      { name: 'temperature',
        arguments: [],
        returnType: [Object],
        description: 'Get the current temperature',
        getterForState: 'temperature',
        tags: [] },
     values: 
      { name: 'values',
        arguments: [],
        returnType: [Object],
        description: 'Get all sensor values',
        tags: [Object] },
     mode: 
      { name: 'mode',
        arguments: [Object],
        returnType: [Object],
        description: 'Get or set the mode of this appliance',
        getterForState: 'mode',
        tags: [] },
     setMode: 
      { name: 'setMode',
        arguments: [Object],
        returnType: [Object],
        description: 'Set the mode of this appliance',
        tags: [] },
     modes: 
      { name: 'modes',
        arguments: [],
        returnType: [Object],
        description: 'Get the available modes',
        getterForState: 'modes',
        tags: [Object] },
     power: 
      { name: 'power',
        arguments: [Object],
        returnType: [Object],
        description: 'Get or set the power state of this appliance',
        getterForState: 'power',
        tags: [] },
     setPower: 
      { name: 'setPower',
        arguments: [Object],
        returnType: [Object],
        description: 'Set the power state of this appliance',
        tags: [] },
     togglePower: 
      { name: 'togglePower',
        arguments: [],
        returnType: [Object],
        description: 'Toggle the power of the appliance, turning it on if off and vice versa',
        tags: [] },
     turnOn: 
      { name: 'turnOn',
        arguments: [],
        returnType: [Object],
        description: 'Turn this appliance on',
        tags: [] },
     turnOff: 
      { name: 'turnOff',
        arguments: [],
        returnType: [Object],
        description: 'Turn this appliance off',
        tags: [] },
     restorableState: 
      { name: 'restorableState',
        arguments: [],
        returnType: [Object],
        description: 'Get the properties that will be captured',
        tags: [Object] },
     captureState: 
      { name: 'captureState',
        arguments: [],
        returnType: [Object],
        description: 'Capture parts of the current state that can be restored',
        tags: [Object] },
     setState: 
      { name: 'setState',
        arguments: [Object],
        returnType: [Object],
        description: 'Restore previously captured state',
        tags: [Object] },
     state: 
      { name: 'state',
        arguments: [],
        returnType: [Object],
        description: 'Get the current state',
        tags: [Object] },
     miioModel: 
      { name: 'miioModel',
        arguments: [],
        returnType: [Object],
        description: 'Get the model identifier of this device',
        tags: [Object] },
     miioProperties: 
      { name: 'miioProperties',
        arguments: [],
        returnType: [Object],
        description: 'Get properties of this device',
        tags: [Object] },
     miioCall: 
      { name: 'miioCall',
        arguments: [Object],
        returnType: [Object],
        description: 'Execute a raw miio-command to the device',
        tags: [Object] } },
  state: 
   { mode: 
      { name: 'mode',
        type: 'string',
        description: 'The current mode of this thing',
        tags: [Object] },
     modes: 
      { name: 'modes',
        type: 'array',
        description: 'The available modes of this thing',
        tags: [Object] },
     power: 
      { name: 'power',
        type: 'boolean',
        description: 'The power state of this appliance',
        tags: [Object] } },
  events: 
   { buzzerChanged: 
      { name: 'buzzerChanged',
        type: 'boolean',
        description: 'Buzzer state has changed',
        tags: [Object] },
     'pm2.5Changed': 
      { name: 'pm2.5Changed',
        type: 'number',
        description: 'PM2.5 density has changed',
        tags: [Object] },
     relativeHumidityChanged: 
      { name: 'relativeHumidityChanged',
        type: 'percentage',
        description: 'Current relative humidity has changed',
        tags: [Object] },
     temperatureChanged: 
      { name: 'temperatureChanged',
        type: 'temperature',
        description: 'Current temperature has changed',
        tags: [Object] },
     modeChanged: 
      { name: 'modeChanged',
        type: 'string',
        description: 'The mode of the thing has changed',
        tags: [Object] },
     modesChanged: 
      { name: 'modesChanged',
        type: 'array',
        description: 'The availables modes of the thing have changed',
        tags: [Object] },
     powerChanged: 
      { name: 'powerChanged',
        type: 'boolean',
        description: 'The power state of the appliance has changed',
        tags: [Object] },
     stateChanged: 
      { name: 'stateChanged',
        type: 'object',
        description: 'The state of the appliance has changed',
        tags: [Object] } } }
device-> MiioDevice {
  model=xiaomi.repeater.v2,
  types=miio,
  capabilities=
}
Metadata {
  types: Set { 'miio' },
  capabilities: Set {},
  actions: 
   { miioModel: 
      { name: 'miioModel',
        arguments: [],
        returnType: [Object],
        description: 'Get the model identifier of this device',
        tags: [Object] },
     miioProperties: 
      { name: 'miioProperties',
        arguments: [],
        returnType: [Object],
        description: 'Get properties of this device',
        tags: [Object] },
     miioCall: 
      { name: 'miioCall',
        arguments: [Object],
        returnType: [Object],
        description: 'Execute a raw miio-command to the device',
        tags: [Object] } },
  state: {},
  events: {} }
device-> MiioDevice {
  model=lumi.gateway.v3,
  types=sensor, miio:gateway, miio,
  capabilities=illuminance, state, children
}
Metadata {
  types: Set { 'sensor', 'miio:gateway', 'miio' },
  capabilities: Set { 'illuminance', 'state', 'children' },
  actions: 
   { illuminance: 
      { name: 'illuminance',
        arguments: [],
        returnType: [Object],
        description: 'Get the current illuminance',
        getterForState: 'illuminance',
        tags: [] },
     values: 
      { name: 'values',
        arguments: [],
        returnType: [Object],
        description: 'Get all sensor values',
        tags: [Object] },
     state: 
      { name: 'state',
        arguments: [],
        returnType: [Object],
        description: 'Get the current state',
        tags: [Object] },
     addDevice: 
      { name: 'addDevice',
        arguments: [],
        returnType: [Object],
        tags: [] },
     stopAddDevice: 
      { name: 'stopAddDevice',
        arguments: [],
        returnType: [Object],
        tags: [] },
     removeDevice: 
      { name: 'removeDevice',
        arguments: [],
        returnType: [Object],
        tags: [] },
     children: 
      { name: 'children',
        arguments: [],
        returnType: [Object],
        description: 'Get children of the thing',
        tags: [Object] },
     child: 
      { name: 'child',
        arguments: [Object],
        returnType: [Object],
        description: 'Get child based on identifier',
        tags: [Object] },
     hasChild: 
      { name: 'hasChild',
        arguments: [Object],
        returnType: [Object],
        description: 'Get if the this thing has the given child',
        tags: [Object] },
     miioModel: 
      { name: 'miioModel',
        arguments: [],
        returnType: [Object],
        description: 'Get the model identifier of this device',
        tags: [Object] },
     miioProperties: 
      { name: 'miioProperties',
        arguments: [],
        returnType: [Object],
        description: 'Get properties of this device',
        tags: [Object] },
     miioCall: 
      { name: 'miioCall',
        arguments: [Object],
        returnType: [Object],
        description: 'Execute a raw miio-command to the device',
        tags: [Object] } },
  state: {},
  events: 
   { illuminanceChanged: 
      { name: 'illuminanceChanged',
        type: 'illuminance',
        description: 'Current illuminance has changed',
        tags: [Object] },
     stateChanged: 
      { name: 'stateChanged',
        type: 'object',
        description: 'The state of the appliance has changed',
        tags: [Object] } } }
device-> MiioDevice {
  model=lumi.sensor_ht,
  types=sensor, miio, miio:subdevice, sub-thing,
  capabilities=relative-humidity, temperature, state
}
Metadata {
  types: Set { 'sensor', 'miio', 'miio:subdevice', 'sub-thing' },
  capabilities: Set { 'relative-humidity', 'temperature', 'state' },
  actions: 
   { relativeHumidity: 
      { name: 'relativeHumidity',
        arguments: [],
        returnType: [Object],
        description: 'Get the current relative humidity',
        getterForState: 'relativeHumidity',
        tags: [] },
     rh: 
      { name: 'rh',
        arguments: [],
        returnType: [Object],
        description: 'Get the current relative humidity',
        getterForState: 'relativeHumidity',
        tags: [] },
     temperature: 
      { name: 'temperature',
        arguments: [],
        returnType: [Object],
        description: 'Get the current temperature',
        getterForState: 'temperature',
        tags: [] },
     values: 
      { name: 'values',
        arguments: [],
        returnType: [Object],
        description: 'Get all sensor values',
        tags: [Object] },
     state: 
      { name: 'state',
        arguments: [],
        returnType: [Object],
        description: 'Get the current state',
        tags: [Object] } },
  state: {},
  events: 
   { relativeHumidityChanged: 
      { name: 'relativeHumidityChanged',
        type: 'percentage',
        description: 'Current relative humidity has changed',
        tags: [Object] },
     temperatureChanged: 
      { name: 'temperatureChanged',
        type: 'temperature',
        description: 'Current temperature has changed',
        tags: [Object] },
     stateChanged: 
      { name: 'stateChanged',
        type: 'object',
        description: 'The state of the appliance has changed',
        tags: [Object] } },
  parent: 
   MiioDevice {
     model=lumi.gateway.v3,
     types=sensor, miio:gateway, miio,
     capabilities=illuminance, state, children
   } }
device-> MiioDevice {
  model=lumi.sensor_ht,
  types=sensor, miio, miio:subdevice, sub-thing,
  capabilities=relative-humidity, temperature, state
}
Metadata {
  types: Set { 'sensor', 'miio', 'miio:subdevice', 'sub-thing' },
  capabilities: Set { 'relative-humidity', 'temperature', 'state' },
  actions: 
   { relativeHumidity: 
      { name: 'relativeHumidity',
        arguments: [],
        returnType: [Object],
        description: 'Get the current relative humidity',
        getterForState: 'relativeHumidity',
        tags: [] },
     rh: 
      { name: 'rh',
        arguments: [],
        returnType: [Object],
        description: 'Get the current relative humidity',
        getterForState: 'relativeHumidity',
        tags: [] },
     temperature: 
      { name: 'temperature',
        arguments: [],
        returnType: [Object],
        description: 'Get the current temperature',
        getterForState: 'temperature',
        tags: [] },
     values: 
      { name: 'values',
        arguments: [],
        returnType: [Object],
        description: 'Get all sensor values',
        tags: [Object] },
     state: 
      { name: 'state',
        arguments: [],
        returnType: [Object],
        description: 'Get the current state',
        tags: [Object] } },
  state: {},
  events: 
   { relativeHumidityChanged: 
      { name: 'relativeHumidityChanged',
        type: 'percentage',
        description: 'Current relative humidity has changed',
        tags: [Object] },
     temperatureChanged: 
      { name: 'temperatureChanged',
        type: 'temperature',
        description: 'Current temperature has changed',
        tags: [Object] },
     stateChanged: 
      { name: 'stateChanged',
        type: 'object',
        description: 'The state of the appliance has changed',
        tags: [Object] } },
  parent: 
   MiioDevice {
     model=lumi.gateway.v3,
     types=sensor, miio:gateway, miio,
     capabilities=illuminance, state, children
   } }
device-> MiioDevice {
  model=lumi.sensor_ht,
  types=sensor, miio, miio:subdevice, sub-thing,
  capabilities=relative-humidity, temperature, state
}
Metadata {
  types: Set { 'sensor', 'miio', 'miio:subdevice', 'sub-thing' },
  capabilities: Set { 'relative-humidity', 'temperature', 'state' },
  actions: 
   { relativeHumidity: 
      { name: 'relativeHumidity',
        arguments: [],
        returnType: [Object],
        description: 'Get the current relative humidity',
        getterForState: 'relativeHumidity',
        tags: [] },
     rh: 
      { name: 'rh',
        arguments: [],
        returnType: [Object],
        description: 'Get the current relative humidity',
        getterForState: 'relativeHumidity',
        tags: [] },
     temperature: 
      { name: 'temperature',
        arguments: [],
        returnType: [Object],
        description: 'Get the current temperature',
        getterForState: 'temperature',
        tags: [] },
     values: 
      { name: 'values',
        arguments: [],
        returnType: [Object],
        description: 'Get all sensor values',
        tags: [Object] },
     state: 
      { name: 'state',
        arguments: [],
        returnType: [Object],
        description: 'Get the current state',
        tags: [Object] } },
  state: {},
  events: 
   { relativeHumidityChanged: 
      { name: 'relativeHumidityChanged',
        type: 'percentage',
        description: 'Current relative humidity has changed',
        tags: [Object] },
     temperatureChanged: 
      { name: 'temperatureChanged',
        type: 'temperature',
        description: 'Current temperature has changed',
        tags: [Object] },
     stateChanged: 
      { name: 'stateChanged',
        type: 'object',
        description: 'The state of the appliance has changed',
        tags: [Object] } },
  parent: 
   MiioDevice {
     model=lumi.gateway.v3,
     types=sensor, miio:gateway, miio,
     capabilities=illuminance, state, children
   } }
device-> MiioDevice {
  model=lumi.sensor_ht,
  types=sensor, miio, miio:subdevice, sub-thing,
  capabilities=relative-humidity, temperature, state
}
Metadata {
  types: Set { 'sensor', 'miio', 'miio:subdevice', 'sub-thing' },
  capabilities: Set { 'relative-humidity', 'temperature', 'state' },
  actions: 
   { relativeHumidity: 
      { name: 'relativeHumidity',
        arguments: [],
        returnType: [Object],
        description: 'Get the current relative humidity',
        getterForState: 'relativeHumidity',
        tags: [] },
     rh: 
      { name: 'rh',
        arguments: [],
        returnType: [Object],
        description: 'Get the current relative humidity',
        getterForState: 'relativeHumidity',
        tags: [] },
     temperature: 
      { name: 'temperature',
        arguments: [],
        returnType: [Object],
        description: 'Get the current temperature',
        getterForState: 'temperature',
        tags: [] },
     values: 
      { name: 'values',
        arguments: [],
        returnType: [Object],
        description: 'Get all sensor values',
        tags: [Object] },
     state: 
      { name: 'state',
        arguments: [],
        returnType: [Object],
        description: 'Get the current state',
        tags: [Object] } },
  state: {},
  events: 
   { relativeHumidityChanged: 
      { name: 'relativeHumidityChanged',
        type: 'percentage',
        description: 'Current relative humidity has changed',
        tags: [Object] },
     temperatureChanged: 
      { name: 'temperatureChanged',
        type: 'temperature',
        description: 'Current temperature has changed',
        tags: [Object] },
     stateChanged: 
      { name: 'stateChanged',
        type: 'object',
        description: 'The state of the appliance has changed',
        tags: [Object] } },
  parent: 
   MiioDevice {
     model=lumi.gateway.v3,
     types=sensor, miio:gateway, miio,
     capabilities=illuminance, state, children
   } }
device-> MiioDevice {
  model=lumi.magnet,
  types=sensor, miio, miio:subdevice, sub-thing,
  capabilities=battery-level, contact, state
}
Metadata {
  types: Set { 'sensor', 'miio', 'miio:subdevice', 'sub-thing' },
  capabilities: Set { 'battery-level', 'contact', 'state' },
  actions: 
   { batteryLevel: 
      { name: 'batteryLevel',
        arguments: [],
        returnType: [Object],
        description: 'Get the battery level of the appliance',
        tags: [] },
     contact: 
      { name: 'contact',
        arguments: [],
        returnType: [Object],
        description: 'Get if contact is currently detected',
        getterForState: 'contact',
        tags: [Object] },
     values: 
      { name: 'values',
        arguments: [],
        returnType: [Object],
        description: 'Get all sensor values',
        tags: [Object] },
     state: 
      { name: 'state',
        arguments: [],
        returnType: [Object],
        description: 'Get the current state',
        tags: [Object] } },
  state: 
   { batteryLevel: 
      { name: 'batteryLevel',
        type: 'percentage',
        description: 'Current battery level of the appliance',
        tags: [Object] } },
  events: 
   { batteryLevelChanged: 
      { name: 'batteryLevelChanged',
        type: 'percentage',
        description: 'Battery level of the appliance has changed',
        tags: [Object] },
     contactChanged: 
      { name: 'contactChanged',
        type: 'boolean',
        description: 'Change in detected contact',
        tags: [Object] },
     opened: 
      { name: 'opened',
        type: 'mixed',
        description: 'Contact sensor is open, contact has been lost',
        tags: [Object] },
     closed: 
      { name: 'closed',
        type: 'mixed',
        description: 'Contact sensor is closed, contact has been detected',
        tags: [Object] },
     stateChanged: 
      { name: 'stateChanged',
        type: 'object',
        description: 'The state of the appliance has changed',
        tags: [Object] } },
  parent: 
   MiioDevice {
     model=lumi.gateway.v3,
     types=sensor, miio:gateway, miio,
     capabilities=illuminance, state, children
   } }
device-> MiioDevice {
  model=lumi.switch,
  types=button, controller, miio, miio:subdevice, sub-thing,
  capabilities=battery-level, actions, state
}
Metadata {
  types: Set { 'button', 'controller', 'miio', 'miio:subdevice', 'sub-thing' },
  capabilities: Set { 'battery-level', 'actions', 'state' },
  actions: 
   { batteryLevel: 
      { name: 'batteryLevel',
        arguments: [],
        returnType: [Object],
        description: 'Get the battery level of the appliance',
        tags: [] },
     actionsChanged: 
      { name: 'actionsChanged',
        arguments: [],
        returnType: [Object],
        description: 'Get the actions that this controller can emit',
        tags: [Object] },
     state: 
      { name: 'state',
        arguments: [],
        returnType: [Object],
        description: 'Get the current state',
        tags: [Object] } },
  state: 
   { batteryLevel: 
      { name: 'batteryLevel',
        type: 'percentage',
        description: 'Current battery level of the appliance',
        tags: [Object] },
     actions: 
      { name: 'actions',
        type: 'array',
        description: 'Actions that the controller can emit',
        tags: [Object] } },
  events: 
   { batteryLevelChanged: 
      { name: 'batteryLevelChanged',
        type: 'percentage',
        description: 'Battery level of the appliance has changed',
        tags: [Object] },
     actions: 
      { name: 'actions',
        type: 'array',
        description: 'The supported actions have changed',
        tags: [Object] },
     action: 
      { name: 'action',
        type: 'object',
        description: 'A certain action has been triggered',
        tags: [Object] },
     'action:<id>': 
      { name: 'action:<id>',
        type: 'mixed',
        description: 'Action with the given id has been triggered',
        tags: [Object] },
     stateChanged: 
      { name: 'stateChanged',
        type: 'object',
        description: 'The state of the appliance has changed',
        tags: [Object] } },
  parent: 
   MiioDevice {
     model=lumi.gateway.v3,
     types=sensor, miio:gateway, miio,
     capabilities=illuminance, state, children
   } }
device-> MiioDevice {
  model=lumi.magnet,
  types=sensor, miio, miio:subdevice, sub-thing,
  capabilities=battery-level, contact, state
}
Metadata {
  types: Set { 'sensor', 'miio', 'miio:subdevice', 'sub-thing' },
  capabilities: Set { 'battery-level', 'contact', 'state' },
  actions: 
   { batteryLevel: 
      { name: 'batteryLevel',
        arguments: [],
        returnType: [Object],
        description: 'Get the battery level of the appliance',
        tags: [] },
     contact: 
      { name: 'contact',
        arguments: [],
        returnType: [Object],
        description: 'Get if contact is currently detected',
        getterForState: 'contact',
        tags: [Object] },
     values: 
      { name: 'values',
        arguments: [],
        returnType: [Object],
        description: 'Get all sensor values',
        tags: [Object] },
     state: 
      { name: 'state',
        arguments: [],
        returnType: [Object],
        description: 'Get the current state',
        tags: [Object] } },
  state: 
   { batteryLevel: 
      { name: 'batteryLevel',
        type: 'percentage',
        description: 'Current battery level of the appliance',
        tags: [Object] } },
  events: 
   { batteryLevelChanged: 
      { name: 'batteryLevelChanged',
        type: 'percentage',
        description: 'Battery level of the appliance has changed',
        tags: [Object] },
     contactChanged: 
      { name: 'contactChanged',
        type: 'boolean',
        description: 'Change in detected contact',
        tags: [Object] },
     opened: 
      { name: 'opened',
        type: 'mixed',
        description: 'Contact sensor is open, contact has been lost',
        tags: [Object] },
     closed: 
      { name: 'closed',
        type: 'mixed',
        description: 'Contact sensor is closed, contact has been detected',
        tags: [Object] },
     stateChanged: 
      { name: 'stateChanged',
        type: 'object',
        description: 'The state of the appliance has changed',
        tags: [Object] } },
  parent: 
   MiioDevice {
     model=lumi.gateway.v3,
     types=sensor, miio:gateway, miio,
     capabilities=illuminance, state, children
   } }
device-> MiioDevice {
  model=lumi.magnet,
  types=sensor, miio, miio:subdevice, sub-thing,
  capabilities=battery-level, contact, state
}
Metadata {
  types: Set { 'sensor', 'miio', 'miio:subdevice', 'sub-thing' },
  capabilities: Set { 'battery-level', 'contact', 'state' },
  actions: 
   { batteryLevel: 
      { name: 'batteryLevel',
        arguments: [],
        returnType: [Object],
        description: 'Get the battery level of the appliance',
        tags: [] },
     contact: 
      { name: 'contact',
        arguments: [],
        returnType: [Object],
        description: 'Get if contact is currently detected',
        getterForState: 'contact',
        tags: [Object] },
     values: 
      { name: 'values',
        arguments: [],
        returnType: [Object],
        description: 'Get all sensor values',
        tags: [Object] },
     state: 
      { name: 'state',
        arguments: [],
        returnType: [Object],
        description: 'Get the current state',
        tags: [Object] } },
  state: 
   { batteryLevel: 
      { name: 'batteryLevel',
        type: 'percentage',
        description: 'Current battery level of the appliance',
        tags: [Object] } },
  events: 
   { batteryLevelChanged: 
      { name: 'batteryLevelChanged',
        type: 'percentage',
        description: 'Battery level of the appliance has changed',
        tags: [Object] },
     contactChanged: 
      { name: 'contactChanged',
        type: 'boolean',
        description: 'Change in detected contact',
        tags: [Object] },
     opened: 
      { name: 'opened',
        type: 'mixed',
        description: 'Contact sensor is open, contact has been lost',
        tags: [Object] },
     closed: 
      { name: 'closed',
        type: 'mixed',
        description: 'Contact sensor is closed, contact has been detected',
        tags: [Object] },
     stateChanged: 
      { name: 'stateChanged',
        type: 'object',
        description: 'The state of the appliance has changed',
        tags: [Object] } },
  parent: 
   MiioDevice {
     model=lumi.gateway.v3,
     types=sensor, miio:gateway, miio,
     capabilities=illuminance, state, children
   } }
device-> MiioDevice {
  model=lumi.switch,
  types=button, controller, miio, miio:subdevice, sub-thing,
  capabilities=battery-level, actions, state
}
Metadata {
  types: Set { 'button', 'controller', 'miio', 'miio:subdevice', 'sub-thing' },
  capabilities: Set { 'battery-level', 'actions', 'state' },
  actions: 
   { batteryLevel: 
      { name: 'batteryLevel',
        arguments: [],
        returnType: [Object],
        description: 'Get the battery level of the appliance',
        tags: [] },
     actionsChanged: 
      { name: 'actionsChanged',
        arguments: [],
        returnType: [Object],
        description: 'Get the actions that this controller can emit',
        tags: [Object] },
     state: 
      { name: 'state',
        arguments: [],
        returnType: [Object],
        description: 'Get the current state',
        tags: [Object] } },
  state: 
   { batteryLevel: 
      { name: 'batteryLevel',
        type: 'percentage',
        description: 'Current battery level of the appliance',
        tags: [Object] },
     actions: 
      { name: 'actions',
        type: 'array',
        description: 'Actions that the controller can emit',
        tags: [Object] } },
  events: 
   { batteryLevelChanged: 
      { name: 'batteryLevelChanged',
        type: 'percentage',
        description: 'Battery level of the appliance has changed',
        tags: [Object] },
     actions: 
      { name: 'actions',
        type: 'array',
        description: 'The supported actions have changed',
        tags: [Object] },
     action: 
      { name: 'action',
        type: 'object',
        description: 'A certain action has been triggered',
        tags: [Object] },
     'action:<id>': 
      { name: 'action:<id>',
        type: 'mixed',
        description: 'Action with the given id has been triggered',
        tags: [Object] },
     stateChanged: 
      { name: 'stateChanged',
        type: 'object',
        description: 'The state of the appliance has changed',
        tags: [Object] } },
  parent: 
   MiioDevice {
     model=lumi.gateway.v3,
     types=sensor, miio:gateway, miio,
     capabilities=illuminance, state, children
   } }
device-> MiioDevice {
  model=lumi.switch,
  types=button, controller, miio, miio:subdevice, sub-thing,
  capabilities=battery-level, actions, state
}
Metadata {
  types: Set { 'button', 'controller', 'miio', 'miio:subdevice', 'sub-thing' },
  capabilities: Set { 'battery-level', 'actions', 'state' },
  actions: 
   { batteryLevel: 
      { name: 'batteryLevel',
        arguments: [],
        returnType: [Object],
        description: 'Get the battery level of the appliance',
        tags: [] },
     actionsChanged: 
      { name: 'actionsChanged',
        arguments: [],
        returnType: [Object],
        description: 'Get the actions that this controller can emit',
        tags: [Object] },
     state: 
      { name: 'state',
        arguments: [],
        returnType: [Object],
        description: 'Get the current state',
        tags: [Object] } },
  state: 
   { batteryLevel: 
      { name: 'batteryLevel',
        type: 'percentage',
        description: 'Current battery level of the appliance',
        tags: [Object] },
     actions: 
      { name: 'actions',
        type: 'array',
        description: 'Actions that the controller can emit',
        tags: [Object] } },
  events: 
   { batteryLevelChanged: 
      { name: 'batteryLevelChanged',
        type: 'percentage',
        description: 'Battery level of the appliance has changed',
        tags: [Object] },
     actions: 
      { name: 'actions',
        type: 'array',
        description: 'The supported actions have changed',
        tags: [Object] },
     action: 
      { name: 'action',
        type: 'object',
        description: 'A certain action has been triggered',
        tags: [Object] },
     'action:<id>': 
      { name: 'action:<id>',
        type: 'mixed',
        description: 'Action with the given id has been triggered',
        tags: [Object] },
     stateChanged: 
      { name: 'stateChanged',
        type: 'object',
        description: 'The state of the appliance has changed',
        tags: [Object] } },
  parent: 
   MiioDevice {
     model=lumi.gateway.v3,
     types=sensor, miio:gateway, miio,
     capabilities=illuminance, state, children
   } }
device-> MiioDevice {
  model=lumi.cube,
  types=controller, miio, miio:subdevice, sub-thing,
  capabilities=actions, state
}
Metadata {
  types: Set { 'controller', 'miio', 'miio:subdevice', 'sub-thing' },
  capabilities: Set { 'actions', 'state' },
  actions: 
   { actionsChanged: 
      { name: 'actionsChanged',
        arguments: [],
        returnType: [Object],
        description: 'Get the actions that this controller can emit',
        tags: [] },
     state: 
      { name: 'state',
        arguments: [],
        returnType: [Object],
        description: 'Get the current state',
        tags: [Object] } },
  state: 
   { actions: 
      { name: 'actions',
        type: 'array',
        description: 'Actions that the controller can emit',
        tags: [Object] } },
  events: 
   { actions: 
      { name: 'actions',
        type: 'array',
        description: 'The supported actions have changed',
        tags: [Object] },
     action: 
      { name: 'action',
        type: 'object',
        description: 'A certain action has been triggered',
        tags: [Object] },
     'action:<id>': 
      { name: 'action:<id>',
        type: 'mixed',
        description: 'Action with the given id has been triggered',
        tags: [Object] },
     stateChanged: 
      { name: 'stateChanged',
        type: 'object',
        description: 'The state of the appliance has changed',
        tags: [Object] } },
  parent: 
   MiioDevice {
     model=lumi.gateway.v3,
     types=sensor, miio:gateway, miio,
     capabilities=illuminance, state, children
   } }
device-> MiioDevice {
  model=lumi.motion,
  types=sensor, miio, miio:subdevice, sub-thing,
  capabilities=battery-level, motion, state
}
Metadata {
  types: Set { 'sensor', 'miio', 'miio:subdevice', 'sub-thing' },
  capabilities: Set { 'battery-level', 'motion', 'state' },
  actions: 
   { batteryLevel: 
      { name: 'batteryLevel',
        arguments: [],
        returnType: [Object],
        description: 'Get the battery level of the appliance',
        tags: [] },
     motion: 
      { name: 'motion',
        arguments: [],
        returnType: [Object],
        description: 'Get if motion is currently detected',
        getterForState: 'motion',
        tags: [Object] },
     values: 
      { name: 'values',
        arguments: [],
        returnType: [Object],
        description: 'Get all sensor values',
        tags: [Object] },
     state: 
      { name: 'state',
        arguments: [],
        returnType: [Object],
        description: 'Get the current state',
        tags: [Object] } },
  state: 
   { batteryLevel: 
      { name: 'batteryLevel',
        type: 'percentage',
        description: 'Current battery level of the appliance',
        tags: [Object] } },
  events: 
   { batteryLevelChanged: 
      { name: 'batteryLevelChanged',
        type: 'percentage',
        description: 'Battery level of the appliance has changed',
        tags: [Object] },
     motionChanged: 
      { name: 'motionChanged',
        type: 'boolean',
        description: 'Change in detected motion',
        tags: [Object] },
     movement: 
      { name: 'movement',
        type: 'mixed',
        description: 'Movement has been detected',
        tags: [Object] },
     inactivity: 
      { name: 'inactivity',
        type: 'mixed',
        description: 'Inactivity has been detected, no motion detected',
        tags: [Object] },
     stateChanged: 
      { name: 'stateChanged',
        type: 'object',
        description: 'The state of the appliance has changed',
        tags: [Object] } },
  parent: 
   MiioDevice {
     model=lumi.gateway.v3,
     types=sensor, miio:gateway, miio,
     capabilities=illuminance, state, children
   } }
device-> MiioDevice {
  model=lumi.motion,
  types=sensor, miio, miio:subdevice, sub-thing,
  capabilities=battery-level, motion, state
}
Metadata {
  types: Set { 'sensor', 'miio', 'miio:subdevice', 'sub-thing' },
  capabilities: Set { 'battery-level', 'motion', 'state' },
  actions: 
   { batteryLevel: 
      { name: 'batteryLevel',
        arguments: [],
        returnType: [Object],
        description: 'Get the battery level of the appliance',
        tags: [] },
     motion: 
      { name: 'motion',
        arguments: [],
        returnType: [Object],
        description: 'Get if motion is currently detected',
        getterForState: 'motion',
        tags: [Object] },
     values: 
      { name: 'values',
        arguments: [],
        returnType: [Object],
        description: 'Get all sensor values',
        tags: [Object] },
     state: 
      { name: 'state',
        arguments: [],
        returnType: [Object],
        description: 'Get the current state',
        tags: [Object] } },
  state: 
   { batteryLevel: 
      { name: 'batteryLevel',
        type: 'percentage',
        description: 'Current battery level of the appliance',
        tags: [Object] } },
  events: 
   { batteryLevelChanged: 
      { name: 'batteryLevelChanged',
        type: 'percentage',
        description: 'Battery level of the appliance has changed',
        tags: [Object] },
     motionChanged: 
      { name: 'motionChanged',
        type: 'boolean',
        description: 'Change in detected motion',
        tags: [Object] },
     movement: 
      { name: 'movement',
        type: 'mixed',
        description: 'Movement has been detected',
        tags: [Object] },
     inactivity: 
      { name: 'inactivity',
        type: 'mixed',
        description: 'Inactivity has been detected, no motion detected',
        tags: [Object] },
     stateChanged: 
      { name: 'stateChanged',
        type: 'object',
        description: 'The state of the appliance has changed',
        tags: [Object] } },
  parent: 
   MiioDevice {
     model=lumi.gateway.v3,
     types=sensor, miio:gateway, miio,
     capabilities=illuminance, state, children
   } }
device-> MiioDevice {
  model=lumi.sensor_ht,
  types=sensor, miio, miio:subdevice, sub-thing,
  capabilities=relative-humidity, temperature, state
}
Metadata {
  types: Set { 'sensor', 'miio', 'miio:subdevice', 'sub-thing' },
  capabilities: Set { 'relative-humidity', 'temperature', 'state' },
  actions: 
   { relativeHumidity: 
      { name: 'relativeHumidity',
        arguments: [],
        returnType: [Object],
        description: 'Get the current relative humidity',
        getterForState: 'relativeHumidity',
        tags: [] },
     rh: 
      { name: 'rh',
        arguments: [],
        returnType: [Object],
        description: 'Get the current relative humidity',
        getterForState: 'relativeHumidity',
        tags: [] },
     temperature: 
      { name: 'temperature',
        arguments: [],
        returnType: [Object],
        description: 'Get the current temperature',
        getterForState: 'temperature',
        tags: [] },
     values: 
      { name: 'values',
        arguments: [],
        returnType: [Object],
        description: 'Get all sensor values',
        tags: [Object] },
     state: 
      { name: 'state',
        arguments: [],
        returnType: [Object],
        description: 'Get the current state',
        tags: [Object] } },
  state: {},
  events: 
   { relativeHumidityChanged: 
      { name: 'relativeHumidityChanged',
        type: 'percentage',
        description: 'Current relative humidity has changed',
        tags: [Object] },
     temperatureChanged: 
      { name: 'temperatureChanged',
        type: 'temperature',
        description: 'Current temperature has changed',
        tags: [Object] },
     stateChanged: 
      { name: 'stateChanged',
        type: 'object',
        description: 'The state of the appliance has changed',
        tags: [Object] } },
  parent: 
   MiioDevice {
     model=lumi.gateway.v3,
     types=sensor, miio:gateway, miio,
     capabilities=illuminance, state, children
   } }
device-> MiioDevice {
  model=lumi.sensor_ht,
  types=sensor, miio, miio:subdevice, sub-thing,
  capabilities=relative-humidity, temperature, state
}
Metadata {
  types: Set { 'sensor', 'miio', 'miio:subdevice', 'sub-thing' },
  capabilities: Set { 'relative-humidity', 'temperature', 'state' },
  actions: 
   { relativeHumidity: 
      { name: 'relativeHumidity',
        arguments: [],
        returnType: [Object],
        description: 'Get the current relative humidity',
        getterForState: 'relativeHumidity',
        tags: [] },
     rh: 
      { name: 'rh',
        arguments: [],
        returnType: [Object],
        description: 'Get the current relative humidity',
        getterForState: 'relativeHumidity',
        tags: [] },
     temperature: 
      { name: 'temperature',
        arguments: [],
        returnType: [Object],
        description: 'Get the current temperature',
        getterForState: 'temperature',
        tags: [] },
     values: 
      { name: 'values',
        arguments: [],
        returnType: [Object],
        description: 'Get all sensor values',
        tags: [Object] },
     state: 
      { name: 'state',
        arguments: [],
        returnType: [Object],
        description: 'Get the current state',
        tags: [Object] } },
  state: {},
  events: 
   { relativeHumidityChanged: 
      { name: 'relativeHumidityChanged',
        type: 'percentage',
        description: 'Current relative humidity has changed',
        tags: [Object] },
     temperatureChanged: 
      { name: 'temperatureChanged',
        type: 'temperature',
        description: 'Current temperature has changed',
        tags: [Object] },
     stateChanged: 
      { name: 'stateChanged',
        type: 'object',
        description: 'The state of the appliance has changed',
        tags: [Object] } },
  parent: 
   MiioDevice {
     model=lumi.gateway.v3,
     types=sensor, miio:gateway, miio,
     capabilities=illuminance, state, children
   } }
device-> MiioDevice {
  model=lumi.motion,
  types=sensor, miio, miio:subdevice, sub-thing,
  capabilities=battery-level, motion, state
}
Metadata {
  types: Set { 'sensor', 'miio', 'miio:subdevice', 'sub-thing' },
  capabilities: Set { 'battery-level', 'motion', 'state' },
  actions: 
   { batteryLevel: 
      { name: 'batteryLevel',
        arguments: [],
        returnType: [Object],
        description: 'Get the battery level of the appliance',
        tags: [] },
     motion: 
      { name: 'motion',
        arguments: [],
        returnType: [Object],
        description: 'Get if motion is currently detected',
        getterForState: 'motion',
        tags: [Object] },
     values: 
      { name: 'values',
        arguments: [],
        returnType: [Object],
        description: 'Get all sensor values',
        tags: [Object] },
     state: 
      { name: 'state',
        arguments: [],
        returnType: [Object],
        description: 'Get the current state',
        tags: [Object] } },
  state: 
   { batteryLevel: 
      { name: 'batteryLevel',
        type: 'percentage',
        description: 'Current battery level of the appliance',
        tags: [Object] } },
  events: 
   { batteryLevelChanged: 
      { name: 'batteryLevelChanged',
        type: 'percentage',
        description: 'Battery level of the appliance has changed',
        tags: [Object] },
     motionChanged: 
      { name: 'motionChanged',
        type: 'boolean',
        description: 'Change in detected motion',
        tags: [Object] },
     movement: 
      { name: 'movement',
        type: 'mixed',
        description: 'Movement has been detected',
        tags: [Object] },
     inactivity: 
      { name: 'inactivity',
        type: 'mixed',
        description: 'Inactivity has been detected, no motion detected',
        tags: [Object] },
     stateChanged: 
      { name: 'stateChanged',
        type: 'object',
        description: 'The state of the appliance has changed',
        tags: [Object] } },
  parent: 
   MiioDevice {
     model=lumi.gateway.v3,
     types=sensor, miio:gateway, miio,
     capabilities=illuminance, state, children
   } }
